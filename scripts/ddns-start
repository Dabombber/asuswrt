#!/bin/sh
# shellcheck shell=ash
# Usage: ddns-start [IPv4] [IPv6]

# Site to check your IP (use EXTERNIP4 and EXTERNIP6 for providers which are not dual-stack)
EXTERNIP='https://domains.google.com/checkip'

# Gandi 24-character API key
APIKEY='XXXXXXXXXXXXXXXXXXXXXXXX'
# The domain to be updated
DOMAIN='example.com'
# The subdomain can use curl url syntax, eg "{@,*}"
SUBDOMAIN='home'
# Gandi API endpoint
GANDIAPI='https://dns.api.gandi.net/api/v5'


ddns_update_ipv4() {
	HTTP_CODE="$(curl	-fs -w '%{http_code}' -o /dev/null -X PUT 	\
		-H 'Content-Type: application/json' -H "X-Api-Key: $APIKEY"	\
		-d "{\"rrset_ttl\": 10800, \"rrset_values\":[\"$1\"]}"	\
		"$GANDIAPI/domains/${DOMAIN}/records/$SUBDOMAIN/A")"

	[ "$HTTP_CODE" = '201' ]
	return $?
}

ddns_update_ipv6() {
	if [ -n "$1" ]; then
		HTTP_CODE="$(curl	-fs -w '%{http_code}' -o /dev/null -X PUT	\
			-H 'Content-Type: application/json' -H "X-Api-Key: $APIKEY"	\
			-d "{\"rrset_ttl\": 10800, \"rrset_values\":[\"$1\"]}"	\
			"$GANDIAPI/domains/${DOMAIN}/records/$SUBDOMAIN/AAAA")"
		[ "$HTTP_CODE" = '201' ]
		return $?
	fi
	# Currently no IPv6 address assigned, remove any stale ddns entry
	HTTP_CODE="$(curl	-fs -w '%{http_code}' -o /dev/null -X DELETE	\
		-H 'Content-Type: application/json' -H "X-Api-Key: $APIKEY"	\
		"$GANDIAPI/domains/${DOMAIN}/records/$SUBDOMAIN/AAAA")"
	# 404 is also fine here since it just means there was nothing to delete
	[ "$HTTP_CODE" = '404' ] || [ "$HTTP_CODE" = '201' ]
	return $?
}

###
### End of user config
###

# Which results to report to the router ipv4|ipv6|both
REPORT='both'
# Lock file to prevent multiple instances
LOCKFILE='/tmp/.ddns-start.lck'
# File to store last successfully set ip(s)
CACHEFILE='/jffs/configs/.ddns-start'

# Check if an IPv4 address is in the LAN range
#   10.0.0.0 - 10.255.255.255
#   172.16.0.0 - 172.31.255.255
#   192.168.0.0 - 192.168.255.255
# Usage: is_local_ipv4 IPv4
is_local_ipv4() {
	local a b c d h
	IFS=. read -r a b c d <<-EOF
		$1
	EOF
	h="$(printf '%0.2x' "$a" "$b" "$c" "$d")"

	if		\
		{ [ ! "$h" \< '0a000000' ] && [ ! '0affffff' \< "$h" ]; } ||	\
		{ [ ! "$h" \< 'ac100000' ] && [ ! 'ac1fffff' \< "$h" ]; } ||	\
		{ [ ! "$h" \< 'c0a80000' ] && [ ! 'c0a8ffff' \< "$h" ]; }
	then
		true; return $?
	fi

	false; return $?
}

# Check if an IPv4 address is in the CGNAT range
#   100.64.0.0 - 100.127.255.255
# Usage: is_nat_ipv4 IPv4
is_nat_ipv4() {
	local a b c d h
	IFS=. read -r a b c d <<-EOF
		$1
	EOF
	h="$(printf '%0.2x' "$a" "$b" "$c" "$d")"

	# shellcheck disable=SC2071
	[ ! "$h" \< '64400000' ] && [ ! '647fffff' \< "$h" ]; return $?
}

# Check if an IPv6 address is in the LAN range
#   ::,::1
#   fc00::/7
#   fe80::/10
# Usage: is_local_ipv6 IPv6
is_local_ipv6() {
	printf '%s\n' "$1" | grep -Eq '(^::1?$)|(^[fF][cCdDeE])'
}

# Check if a function is defined
# Usage: is_function FUNCTION
is_function() {
	[ "$(type "$1")" = "$1 is a shell function" ]
}

# Check for user in main script to allow log messages from subshells
[ -t 0 ] && { CONSOLE_TTY="$(tty 2>/dev/null)" || unset CONSOLE_TTY; }

# Send message to syslog or terminal if called by a user
# Usage: ddns_log [PRIORITY] MESSAGE
# 	Priorities: debug, info, notice, warning, err, crit, alert, emerg
ddns_log() {
	[ $# -lt 2 ] && set -- "" "$@"
	[ -n "$CONSOLE_TTY" ] && [ "$1" != 'debug' ] && printf '%s\n' "$2" >"$CONSOLE_TTY"
	logger -t "ddns-start[$$]" -p "user.${1:-"notice"}" "$2"
}

# Make sure only one ddns update runs at a time
# Usage: ddns_lock
ddns_lock() {
	[ ! -f "$LOCKFILE" ] && touch "$LOCKFILE" && trap '{ rm -f "$LOCKFILE"; exit; }' EXIT INT TERM
}

# Read the last updated IPs
# Usage: ddns_cache_get TYPE
ddns_cache_get() {
	[ -f "$CACHEFILE.$1" ] && cat "$CACHEFILE.$1"
}

# Save the current IP
# Usage: ddns_cache_set TYPE VALUE
ddns_cache_set() {
	printf '%s\n' "$2" > "$CACHEFILE.$1"
}

# Get IPv4 address if the passed one is invalid
# Usage: ddns_get_ipv4 [IPv4]
ddns_get_ipv4() {
	if [ -n "$1" ] && ! is_local_ipv4 "$1"; then
		echo "$1"
		return
	fi
	local IP
	IP="$(nvram get wan0_ipaddr)"
	if [ -z "$IP" ] || is_local_ipv4 "$IP"; then
		IP="$(curl -fs4 "${EXTERNIP4:-"$EXTERNIP"}")"
		[ -n "$IP" ] && ddns_log 'info' "Detected WAN IP: $IP"
	fi
	echo "$IP"
}

# Get IPv6 address if the passed one is invalid
# Usage: ddns_get_ipv6 [IPv6]
ddns_get_ipv6() {
	if [ -n "$1" ] && ! is_local_ipv6 "$1"; then
		echo "$1"
		return
	fi
	local COUNTER=0 IP
	if [ "$(nvram get ipv6_service)" != 'disabled' ]; then
		IP="$(nvram get ipv6_rtr_addr)"
		while [ -z "$IP" ] && [ $COUNTER -le 20 ]; do
			sleep 1
			COUNTER=$((COUNTER + 1))
			IP="$(nvram get ipv6_rtr_addr)"
		done
		if [ -z "$IP" ] || is_local_ipv6 "$IP"; then
			IP="$(curl -fs6 "${EXTERNIP6:-"$EXTERNIP"}")"
			[ -n "$IP" ] && ddns_log 'info' "Detected WAN IPv6: $IP"
		fi
	fi
	echo "$IP"
}

###
### Start doing stuff
###

# Check this is the only instance
if ! ddns_lock; then
	ddns_log 'ddns update already in progress'
	exit
fi

# Check if there's anything to do
if ! is_function 'ddns_update_ipv6' && is_function 'ddns_update_ipv4'; then
	ddns_log 'info' 'IP updates skipped'
	/sbin/ddns_custom_updated 1
	exit
fi

# Set sail for fail
[ "$REPORT" = 'both' ] && trap 'RESULT="fail"' HUP

# Update both IPv4 and IPv6 at the same time
if is_function 'ddns_update_ipv6' && [ "$(nvram get ipv6_service)" != 'disabled' ]; then
	(
		IP="$(ddns_get_ipv6 "$2")"
		if [ "$(ddns_cache_get ipv6)" = "$IP" ]; then
			ddns_log 'IPv6 is up to date'
		elif ddns_update_ipv6 "$IP"; then
			ddns_log "IPv6 ddns successfully updated (${IP:-"unset"})"
			ddns_cache_set 'ipv6' "$IP"
		else
			ddns_log 'IPv6 failed to update'
			UPDATE='fail'
		fi

		if [ "$REPORT" = 'ipv6' ]; then
			if [ "$UPDATE" = 'fail' ]; then
				/sbin/ddns_custom_updated 0
			else
				/sbin/ddns_custom_updated 1
			fi
		elif [ "$REPORT" = 'both' ] && [ "$UPDATE" = 'fail' ]; then
			kill -HUP "$$"
		fi
	) &
else
	ddns_log 'info' 'IPv6 update skipped'
	[ "$REPORT" = 'ipv6' ] && /sbin/ddns_custom_updated 1
fi

if is_function 'ddns_update_ipv4'; then
	(
		IP="$(ddns_get_ipv4 "$1")"
		if [ -z "$IP" ]; then
			ddns_log 'Unable to determine IPv4 address'
			UPDATE='fail'
		elif is_nat_ipv4 "$IP"; then
			ddns_log 'IPv4 address using CG-NAT'
		elif [ "$(ddns_cache_get ipv4)" = "$IP" ]; then
			ddns_log 'IPv4 is up to date'
		elif ddns_update_ipv4 "$IP"; then
			ddns_log "IPv4 ddns successfully updated ($IP)"
			ddns_cache_set 'ipv4' "$IP"
		else
			ddns_log 'IPv4 failed to update'
			UPDATE='fail'
		fi

		if [ "$REPORT" = 'ipv4' ]; then
			if [ "$UPDATE" = 'fail' ]; then
				/sbin/ddns_custom_updated 0
			else
				/sbin/ddns_custom_updated 1
			fi
		elif [ "$REPORT" = 'both' ] && [ "$UPDATE" = 'fail' ]; then
			kill -HUP "$$"
		fi
	) &
else
	ddns_log 'info' 'IPv4 update skipped'
	[ "$REPORT" = 'ipv4' ] && /sbin/ddns_custom_updated 1
fi

# If both are need, wait. Otherwise they'll handle reporting
if [ "$REPORT" = 'both' ]; then
	wait
	if [ "$RESULT" = 'fail' ]; then
		/sbin/ddns_custom_updated 0
	else
		/sbin/ddns_custom_updated 1
	fi
elif [ -n "$CONSOLE_TTY" ]; then
	# leave running for SSH users
	wait
fi
